{"version":3,"sources":["pages/Dashboard.js","pages/Profile.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["Dashboard","Profile","Image","styled","img","Main","Container","Card","src","Button","App","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAGe,SAASA,IACtB,OACE,6BACE,4CCHS,SAASC,IACtB,OACE,6BACE,mDADF,UAGE,4BACE,6CACA,iDACA,8C,oICPR,IAAMC,EAAQC,IAAOC,IAAV,KAII,SAASC,IACtB,OACE,kBAACC,EAAA,EAAD,KACE,6BACE,kBAACC,EAAA,EAAD,KACE,mDADF,aAEY,6BACV,6BACA,6BACE,kBAACL,EAAD,CAAOM,IAAI,uMACX,4CACA,2CACA,4BACE,iDACA,uDAEF,sCACA,4BACE,+CACA,gDAXJ,kBAiBJ,kBAACC,EAAA,EAAD,aACA,2CACA,+CACA,+CC9BS,SAASC,IACtB,OACE,kBAAC,IAAD,KACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,cAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,YAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,SAAT,UAIJ,6BASA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAACb,EAAD,OAEF,kBAAC,IAAD,CAAOa,KAAK,YACV,kBAACZ,EAAD,OAEF,kBAAC,IAAD,CAAOY,KAAK,SACV,kBAACR,EAAD,UC3BQS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACX,EAAD,OAEFY,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.455c6b79.chunk.js","sourcesContent":["import React from \"react\";\n// import styled from \"styled-components\";\n\nexport default function Dashboard() {\n  return (\n    <div>\n      <h2> Dashboard </h2>\n    </div>\n  );\n}\n","import React from \"react\";\n// import styled from \"styled-components\";\n\nexport default function Profile() {\n  return (\n    <div>\n      <h2> Your Refrigerator </h2>\n      edit...\n      <ul>\n        <li>Eggs 30 units</li>\n        <li>Cabbage 500 grams</li>\n        <li>Add Items...</li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Card, Container, Button } from \"react-bootstrap\";\n\nconst Image = styled.img`\n  width: 300px;\n`;\n\nexport default function Main() {\n  return (\n    <Container>\n      <div>\n        <Card>\n          <h2> WTF should I cook </h2>\n          filter... <br />\n          <br />\n          <div>\n            <Image src=\"https://www.thespruceeats.com/thmb/ltMha1iXJIttnXv9EDQf9WFSrEE=/3896x2922/smart/filters:no_upscale()/hainanese-chicken-rice-very-detailed-recipe-3030408-hero-0a742f08c72044e999202a44e30a1ea7.jpg\"></Image>\n            <h3>Chicken Rice</h3>\n            <h4>Ingredients</h4>\n            <ul>\n              <li>Chicken | 1 whole</li>\n              <li>White Rice | 500 grams</li>\n            </ul>\n            <h4>Method</h4>\n            <ul>\n              <li>Step 1: Do this</li>\n              <li>Step 2: Do that</li>\n            </ul>\n            link to site\n          </div>\n        </Card>\n      </div>\n      <Button>SAVE</Button>\n      <p>SAVE | NOPE </p>\n      <h4>Similar Recipes</h4>\n      <p>infinite scroll</p>\n\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Dashboard from \"./pages/Dashboard.js\";\nimport Profile from \"./pages/Profile.js\";\nimport Main from \"./pages/Main.js\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Dashboard</Link>\n          </li>\n          <li>\n            <Link to=\"/profile\">Profile</Link>\n          </li>\n          <li>\n            <Link to=\"/main\">Main</Link>\n          </li>\n        </ul>\n\n        <hr />\n\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        <Switch>\n          <Route exact path=\"/\">\n            <Dashboard />\n          </Route>\n          <Route path=\"/profile\">\n            <Profile />\n          </Route>\n          <Route path=\"/main\">\n            <Main />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}